@using iConnect.Server.Framework.Identity
@model System.Collections.Generic.IEnumerable<iConnect.Server.ViewModels.UserViewModel>

@{
    ViewBag.Title = "Chat Service";
    Layout = "~/Views/Shared/_HeaderLayout.cshtml";
}



<div class="col-lg-3" ng-app>
    <ul class="nav nav-tabs">
        <li class="active"><a href="#allUsers" data-toggle="tab" aria-expanded="false">All Users</a></li>
        <li><a href="#groups" data-toggle="tab" aria-expanded="true">Groups</a></li>
    </ul>

    <div id="myTabContent" class="tab-content">
        <div class="tab-pane fade active in" id="allUsers">
            <div class="list-group">
                @foreach (var item in Model)
                {
                    <a href="#" class="list-group-item" data-user="@item.UserName">
                        <span class="glyphicon glyphicon-user @(@item.IsOnline ? "user-online" : "")" ></span> <span data-alias="@item.Alias">@item.Alias</span>
                    </a>
                }
            </div>
        </div>
        <div class="tab-pane fade in" id="groups">
            <div style="border-bottom:1px dotted white;width:263px;height:30px;padding-left:246px;padding-top:4px;">
                <a href=# data-modal='@Url.Action("GetManageGroups","Server")' aria-hidden="true" class="modal-link">
                    <span class="glyphicon glyphicon-plus-sign"></span>
                </a>
            </div>

            <div class="list-group" id="groupList" style="margin-top:4px;">
            </div>
        </div>
    </div>


</div>

@Html.Partial("_ChatBox")






@section scripts
{
    @Scripts.Render("~/bundles/chatHub")
    <script src="~/Scripts/noty/themes/relax.js"></script>
    <script type="text/javascript">
        var chatterApp = new Chatter();
        function closeBroadcastDialog() {
            $("#modal").modal('hide');
        }
        $(function () {
            chatterApp = new Chatter();
            chatterApp.init('@User.Identity.Name','@((User as CustomPrincipal).Alias)');
            $('#txtMessage').focus();

            $(".list-group-item").click(function () {
                $("#chat-user").remove();
                $("#chat-area").prepend('<span class="label label-success" id="chat-user"></span>');
                var user = $(this).attr("data-user");
                $("#chat-user").attr("data-user", user);
                var alias = $(this).text();                
                alias = alias.replace("Online", "");
                $(".chatWithText").html("<span class='label label-success' style='background-color:#2B97EA!important;'>Chatting with " + alias + "</span>");
                console.log($($(this)).find(".badge badge-space").html());
            });
        });

        function CreateGroup() {
            var groupName = prompt('Enter Group Name');

            if (groupName != null || groupName != undefined) {
                var newHtml = '<a href="#" class="list-group-item user-list-item">';
                newHtml += '<span class="glyphicon glyphicon-user"></span> <span>' + groupName + '</span></a>';

                $('#groupList').append(newHtml);
            }
        }


        $(function () {
            $('.list-group.checked-list-box .list-group-item').each(function () {

                // Settings
                var $widget = $(this),
                    $checkbox = $('<input type="checkbox" class="hidden" />'),
                    color = ($widget.data('color') ? $widget.data('color') : "primary"),
                    style = ($widget.data('style') == "button" ? "btn-" : "list-group-item-"),
                    settings = {
                        on: {
                            icon: 'glyphicon glyphicon-check'
                        },
                        off: {
                            icon: 'glyphicon glyphicon-unchecked'
                        }
                    };

                $widget.css('cursor', 'pointer');
                $widget.append($checkbox);

                // Event Handlers
                $widget.on('click', function () {
                    $checkbox.prop('checked', !$checkbox.is(':checked'));
                    $checkbox.triggerHandler('change');
                    updateDisplay();
                });
                $checkbox.on('change', function () {
                    updateDisplay();
                });


                // Actions
                function updateDisplay() {
                    var isChecked = $checkbox.is(':checked');

                    // Set the button's state
                    $widget.data('state', (isChecked) ? "on" : "off");

                    // Set the button's icon
                    $widget.find('.state-icon')
                        .removeClass()
                        .addClass('state-icon ' + settings[$widget.data('state')].icon);

                    // Update the button's color
                    if (isChecked) {
                        $widget.addClass(style + color + ' active');
                    } else {
                        $widget.removeClass(style + color + ' active');
                    }
                }

                // Initialization
                function init() {

                    if ($widget.data('checked') == true) {
                        $checkbox.prop('checked', !$checkbox.is(':checked'));
                    }

                    updateDisplay();

                    // Inject the icon if applicable
                    if ($widget.find('.state-icon').length == 0) {
                        $widget.prepend('<span class="state-icon ' + settings[$widget.data('state')].icon + '"></span>');
                    }
                }
                init();
            });

            $('#get-checked-data').on('click', function (event) {
                event.preventDefault();
                var checkedItems = {}, counter = 0;
                $("#check-list-box li.active").each(function (idx, li) {
                    checkedItems[counter] = $(li).text();
                    counter++;
                });
                $('#display-json').html(JSON.stringify(checkedItems, null, '\t'));
            });
        });

    </script>
}